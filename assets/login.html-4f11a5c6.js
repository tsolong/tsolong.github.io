import{_ as n,p as s,q as a,a1 as e}from"./framework-cf3d8b6f.js";const p={},t=e(`<h1 id="登录替换" tabindex="-1"><a class="header-anchor" href="#登录替换" aria-hidden="true">#</a> 登录替换</h1><div class="custom-container tip"><p class="custom-container-title">理念</p><p>MineAdmin 后台只提供了最基础的登录功能，即：只需要提供 <code>用户名</code> 和 <code>密码</code> 即可登录，大家看到的验证码只是前端进行验证。 并不存在任何后端逻辑，我们的理念就是提供最简单实用的功能，而把扩展的空间留给大家。</p><p>现在后台登录体验越来越友好，有的需要支持扫码登录、有的需要支持微信登录或者是短信验证码登录等方式，我们提供了<code>登录替换</code>功能，只需要对配置文件参数进行设置，然后开发自己的登录逻辑即可，不需要改动<code>MineAdmin</code>的任何原生功能。</p></div><h2 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> dependencies</h2><p>该文件类似于 <code>laravel</code> 的门面，是 <code>hyperf</code> 一大特色功能，用于管理 DI 的依赖关系和类对应关系。</p><ul><li>文件目录：<code>config/autoload/dependencies.php</code></li><li>文件内容：</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// 省略其他定义...</span>
    <span class="token class-name class-name-fully-qualified static-context">Mine<span class="token punctuation">\\</span>Interfaces<span class="token punctuation">\\</span>UserServiceInterface</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>System<span class="token punctuation">\\</span>Service<span class="token punctuation">\\</span>Dependencies<span class="token punctuation">\\</span>UserAuthService</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，我们定义了一个 <code>UserServiceInterface</code> 接口，绑定了 <code>UserAuthService</code> 类。</p><p>这样做的好处就是：</p><ul><li>我们定义了统一的接口，任何类实现接口就必须实现其接口功能。</li><li>通过这个模式，我们只需要替换到绑定的类即可。</li></ul><p>我们接下来改变绑定的类：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token punctuation">[</span>
    <span class="token comment">// 省略其他定义...</span>
    <span class="token class-name class-name-fully-qualified static-context">Mine<span class="token punctuation">\\</span>Interfaces<span class="token punctuation">\\</span>UserServiceInterface</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>FooLogin</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="userserviceinterface" tabindex="-1"><a class="header-anchor" href="#userserviceinterface" aria-hidden="true">#</a> UserServiceInterface</h2><ul><li>下面就是接口的原型，有两个必须要实现的方法：<code>login()</code> 和 <code>logout()</code></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">Mine<span class="token punctuation">\\</span>Interfaces</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Mine<span class="token punctuation">\\</span>Vo<span class="token punctuation">\\</span>UserServiceVo</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 用户服务抽象
 */</span>
<span class="token keyword">interface</span> <span class="token class-name-definition class-name">UserServiceInterface</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token class-name type-declaration">UserServiceVo</span> <span class="token variable">$userServiceVo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现登录和退出" tabindex="-1"><a class="header-anchor" href="#实现登录和退出" aria-hidden="true">#</a> 实现登录和退出</h2><p>接口并没有指定方法返回的数据类型，以下返回 <code>bool</code> 仅为示例代码</p><ul><li>App\\FooLogin</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">FooLogin</span> <span class="token keyword">implements</span> <span class="token class-name class-name-fully-qualified">Mine<span class="token punctuation">\\</span>Interfaces<span class="token punctuation">\\</span>UserServiceInterface</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token class-name type-declaration">UserServiceVo</span> <span class="token variable">$userServiceVo</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$userServiceVo</span><span class="token operator">-&gt;</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">&#39;狂徒张三&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;你不是法外狂徒：张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$userServiceVo</span><span class="token operator">-&gt;</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">&#39;123456&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;密码错误&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 一堆业务逻辑 todo...</span>

        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),c=[t];function o(i,l){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","login.html.vue"]]);export{d as default};
