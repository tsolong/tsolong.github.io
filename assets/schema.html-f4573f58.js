import{_ as n,p as s,q as a,a1 as e}from"./framework-cf3d8b6f.js";const p={},t=e(`<h1 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h1><div class="custom-container tip"><p class="custom-container-title">介绍</p><p>MineAdmin 后端系统架构思想来源于 Spring boot，但由于 php 和 java 并不一样，也不适合完全照搬，所以我们取其精华</p><p>系统分层：</p><ol><li>控制器 Controller</li><li>业务服务层 Service</li><li>数据访问映射 Mapper，这一层也可以叫做 Dao 层</li><li>模型 Model，模型也可以叫做实体类</li></ol><p><strong>注意：系统分层是为了更好管理业务代码逻辑，如觉着麻烦，可以用传统方式直接在 Controller 调用 Db 一把梭。</strong></p></div><h2 id="controller控制器层" tabindex="-1"><a class="header-anchor" href="#controller控制器层" aria-hidden="true">#</a> Controller控制器层</h2><p>MineAdmin 只是一个后台权限管理系统，控制器必须要继承 <code>MineController</code>，若是写前台或者跟后台无关的功能，则不需要继承</p><p>控制器按照系统架构分层，一般不进行业务逻辑代码的编写，它只负责业务代码的调用、返回数据功能。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Foo<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Mine<span class="token punctuation">\\</span>MineController</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\\</span>HttpServer<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\\</span>HttpServer<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>GetMapping</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Message<span class="token punctuation">\\</span>ResponseInterface</span><span class="token punctuation">;</span>

<span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Controller</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">prefix</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;foo&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">FooController</span> <span class="token keyword">extends</span> <span class="token class-name">MineController</span> <span class="token punctuation">{</span>
    
    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">GetMapping</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;index&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ResponseInterface</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;操作成功&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string single-quoted-string">&#39;data&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;hello MineAdmin!&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service业务服务层" tabindex="-1"><a class="header-anchor" href="#service业务服务层" aria-hidden="true">#</a> Service业务服务层</h2><p>业务服务层也叫业务逻辑层，这一层主要写复杂的、可复用的业务逻辑功能，但不涉及任何直接对数据库的操作。</p><p><strong>而是通过调用 <code>Mapper</code> 从而间接对数据库操作</strong></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>业务服务层和数据访问映射是一家，一般 <code>Service</code> 都要引入数据访问映射 <code>Mapper</code> 对象</p><p>业务服务层要继承 <code>AbstractService</code> 抽象服务类，该类引入了 <code>ServiceTrait</code> 里面封装了一套通用的 <code>CRUD</code> 操作方法</p></div><ul><li>通过 <code>Inject</code> 注解注入Mapper</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Foo<span class="token punctuation">\\</span>Service</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Mine<span class="token punctuation">\\</span>Abstracts<span class="token punctuation">\\</span>AbstractService</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\\</span>Di<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Inject</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Foo<span class="token punctuation">\\</span>Mapper<span class="token punctuation">\\</span>FooMapper</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">FooService</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractService</span>
<span class="token punctuation">{</span>
    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Inject</span></span><span class="token delimiter punctuation">]</span></span>
    <span class="token keyword">public</span> <span class="token class-name type-declaration">FooMapper</span> <span class="token variable">$mapper</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 <code>__construct</code> 参数注入Mapper</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Foo<span class="token punctuation">\\</span>Service</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Mine<span class="token punctuation">\\</span>Abstracts<span class="token punctuation">\\</span>AbstractService</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Foo<span class="token punctuation">\\</span>Mapper<span class="token punctuation">\\</span>FooMapper</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">FooService</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name type-declaration">FooMapper</span> <span class="token variable">$mapper</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">FooMapper</span> <span class="token variable">$mapper</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">mapper</span> <span class="token operator">=</span> <span class="token variable">$mapper</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mapper数据访问映射层" tabindex="-1"><a class="header-anchor" href="#mapper数据访问映射层" aria-hidden="true">#</a> Mapper数据访问映射层</h2><p>这一层其实含义就是 DAO 层，该层封装的方法其实就是对数据进行增删改查操作，但不同 <code>Service</code> 的是，Mapper的方法只接受 <code>sql语句</code> 和 <code>参数</code>，不负责实现具体的增删改查业务逻辑。只管将接受到的sql语句和参数拼接在一起，然后执行sql语句，并返回执行结果。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Mapper<span class="token punctuation">\\</span>FooMapper</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Model<span class="token punctuation">\\</span>FooModel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Mine<span class="token punctuation">\\</span>Abstracts<span class="token punctuation">\\</span>AbstractMapper</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">FooMapper</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMapper</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$model</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">assignModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">model</span> <span class="token operator">=</span> <span class="token class-name static-context">FooModel</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="model模型" tabindex="-1"><a class="header-anchor" href="#model模型" aria-hidden="true">#</a> Model模型</h2><p>模型也可以叫实体类，它定义并映射了数据库的物理字段。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>MineAdmin</code> 系统使用了 <code>Hyperf</code> 的模型，也就是 <code>Laravel</code> 的 <strong>Eloquent ORM</strong>，模型的操作方法可查看 <code>Laravel</code> 的相关文档</p><p>文档就不粘贴示例代码了</p></div>`,20),c=[t];function o(i,l){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","schema.html.vue"]]);export{r as default};
